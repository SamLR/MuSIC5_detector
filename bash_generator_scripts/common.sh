#
#
# WARNING
# These functions are _very_ brittle and designed only really to be used
# for MuSIC 5 simulation. 
#
#

# gets the current branch & commit info
# repo info
gitcommit="$(git log --pretty=format:'%h' -n 1)" || gitcommit="not_commited"
gitbranch="$(git symbolic-ref HEAD 2>/dev/null)" || gitbranch="unnamed_branch"
gitbranch=${gitbranch##refs/heads/}

# standard header
header="#\n\
# This is an autogenerated header, do not modify it\n\
# Git commit:\t [$gitbranch $gitcommit]\n\
# Generated on:\t $(date)\n\
#\n"

# file suffixes
outfile_suf="root" # '.' is added at location, mainly for readability
macro_suf="mac"
log_suf="log"
error_suf="er"

# locations of stuff
base="../.." # was 'root' but that gets confusing using ROOT=
infile="$base/g4blout/from_hep_1Bn/out_36_rotate.root"
exedir="$base/MuSIC5_detector/release"
exe="$exedir/music" # usage: ./music <in.root> <out.root> [run.mac]
outdir="$base/output/$runname"
logdir="$outdir/log"
archivedir="$base/output/archive/"

runlog="$logdir/$runname.$log_suf" # master log

# useful functions
archive_dir ()
{ # if the directory $1 exists create a dated & commit numbered archive (in $2), 
# otherwise create the directorys
    if [ ! -d $1 ]; then
        #  if the directories don't exist make them
        echo "Creating new directory: $1"
        mkdir $1
    else 
        # if it does exist make an archive 
        archive_dir="${2}/$(date +"%d-%m-%y_%H%M").$gitcommit"
        echo "Archiving to $archive_dir"
        mkdir $archive_dir
        echo "moving in"
        mv $1 $archive_dir/.
        mkdir $1
    fi
}

make_file_name()
{
    # $1 = runname
    # $2 = stopping target material
    # $3 = stopping target thickness
    # $4 = degrader material
    # $5 = degrader thickness
    name="${1}_st_${2}_${3}mm_deg_${4}_${5}mm"
}

make_macro () 
{ # $1 ST material, $2 ST thickness, $3 DegMat $4 DegThickness $5 this filename

	cat > $5 <<-EOM
	$header
	# Optimising stopping target
	#    STmaterial   : $1
	#    STthickness  : $2
	#    DegMaterial  : $3
	#    DegThickness : $4
	#
	# File name: $5
	
	
	# Make sure that we're using the G4BL file but not optical processes
	/MuSIC_Detector/enableOpticalProcesses false
	/MuSIC_Detector/gun/g4blEnable true
	
	# Load the correct fieldmaps
	/MuSIC_Detector/dipField ../../MuSIC5_detector/fieldmap/fieldmap_dipole.txt
	/MuSIC_Detector/solField ../../MuSIC5_detector/fieldmap/fieldmap_solenoid.txt
	
	/MuSIC_Detector/targetMat $1
	/MuSIC_Detector/targetZ $2 mm
	/MuSIC_Detector/degraderMat $3
	/MuSIC_Detector/degraderZ $4 mm
	/run/initialize
	EOM

}

run_it()
{ # $1 = STmaterial, $2 = STthickness, $3 = DegMaterial $4 = DegThickness $5 = filename
    prefix="$5"
    outfile="$outdir/$prefix.$outfile_suf"
    macfile="$logdir/$prefix.$macro_suf" # save the macros with the logs
    erfile="$logdir/$prefix.$error_suf"
    # logfile="$logdir/$prefix.$log_suf"
    make_macro $1 $2 $3 $4 $macfile 
    echo "$5 run started" | tee -a $runlog 
    echo $macfile " generated" >> $runlog
    execmd="$exe $infile $outfile $macfile"
    # Log errors but sink everything else
    cmd="$execmd > /dev/null 2> $erfile "
    echo "Running command:" >> $runlog
    echo $cmd >> $runlog
    eval $cmd
    # this will also go to stdout
    echo "$5 run complete" | tee -a $runlog 
    echo -e "************************\n" >> $runlog
}